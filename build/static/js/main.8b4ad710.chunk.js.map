{"version":3,"sources":["ColorModeSwitcher.tsx","components/Link/index.tsx","layout/Header.tsx","components/Walk/index.tsx","screens/Home.tsx","screens/Practical.tsx","layout/Footer.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","Link","as","RRLink","Header","justifyContent","alignItems","p","borderBottom","textTransform","to","spacing","justifySelf","Walk","komootId","location","date","isDraft","useState","isLoaded","setLoaded","useInView","threshold","ref","inView","fontFamily","onLoad","src","width","height","frameBorder","scrolling","DateHeader","isUpcoming","Date","toLocaleDateString","colorScheme","Home","filter","w","base","md","px","style","divider","MoonDivider","my","Practical","Footer","year","getFullYear","borderTop","href","isExternal","App","theme","minH","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8b4ad710.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import { Link as ChakraLink, LinkProps as ChakraLinkProps } from \"@chakra-ui/layout\"\nimport { Link as RRLink, LinkProps as RRLinkProps } from \"react-router-dom\"\n\ntype LinkProps = ChakraLinkProps & Pick<RRLinkProps, \"to\">\n\nexport const Link = (props: LinkProps) => {\n    return <ChakraLink as={RRLink} {...props} />\n}\n","import { Heading, HStack, Spacer } from \"@chakra-ui/layout\"\nimport { FaMoon } from \"react-icons/fa\"\nimport { ColorModeSwitcher } from \"../ColorModeSwitcher\"\nimport { Link } from \"../components/Link\"\n\nexport const Header = () => {\n    return <HStack justifyContent=\"center\" alignItems=\"center\" p={3} borderBottom=\"1px solid\">\n        <FaMoon />\n        <Heading as=\"h4\" size=\"md\" textTransform=\"uppercase\">\n            <Link to={\"/\"}>\n            N8WNDLNG\n            </Link>\n        </Heading>\n        <Spacer />\n        <HStack>\n        <HStack spacing={4}>\n            <Link to=\"praktisch\">Praktisch</Link>\n        </HStack>\n        <Spacer />\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\n        </HStack>\n    </HStack>\n}\n","import { Heading, Stack } from \"@chakra-ui/layout\";\nimport { Badge, HStack } from \"@chakra-ui/react\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\nimport { useState } from \"react\";\nimport { useInView } from \"react-intersection-observer\";\n\ninterface WalkProps {\n    komootId: string;\n    location: string;\n    date?: Date;\n    isDraft?: boolean;\n}\n\nexport const Walk = ({ komootId, location, date, isDraft }: WalkProps) => {\n    const [isLoaded, setLoaded] = useState(false);\n    const { ref, inView } = useInView({\n        /* Optional options */\n        threshold: 0,\n    });\n    return <Stack spacing={4} fontFamily=\"sans-serif\" ref={ref}>\n        <Stack spacing={1}>\n            <DateHeader date={date} isDraft={isDraft} />\n            <Heading as=\"h2\" textTransform=\"uppercase\" color=\"rgb(79, 133, 13)\">\n                {location}\n            </Heading>\n        </Stack>\n        {komootId && <Skeleton isLoaded={isLoaded}>\n            {(inView || isLoaded) && <iframe onLoad={() => { setLoaded(true) }} src={`https://www.komoot.com/tour/${komootId}/embed`} width=\"100%\" height=\"500px\" frameBorder=\"0\" scrolling=\"no\"></iframe>}\n        </Skeleton>\n        }\n    </Stack>\n}\n\ninterface DateHeaderProps {\n    date?: Date;\n    isDraft?: boolean;\n}\n\nconst DateHeader = ({ date, isDraft }: DateHeaderProps) => {\n    const isUpcoming = date && date > new Date();\n\n    return <HStack spacing={2}>\n        <Heading as=\"h4\" fontSize=\"md\" textTransform=\"uppercase\">\n            {date?.toLocaleDateString() || \"TBD\"}\n        </Heading>\n        {isUpcoming && <Badge colorScheme=\"blue\">Upcoming</Badge>}\n        {isDraft && <Badge colorScheme=\"red\">Draft</Badge>}\n    </HStack>\n}\n","import { Box, Heading, VStack, Stack, Center, Divider } from \"@chakra-ui/layout\"\nimport { Image, useColorModeValue } from \"@chakra-ui/react\"\nimport { FaMoon } from \"react-icons/fa\"\nimport { Walk } from \"../components/Walk\"\n\nexport const Home = () => {\n    const filter = useColorModeValue(\"none\", \"invert()\")\n    return <VStack w=\"100%\" spacing={{base: 6, md: 12}}>\n        <Box w=\"xs\" px={{base: 10, md: 2}}>\n            <Image style={{ filter }} src=\"https://cdn.pixabay.com/photo/2021/04/05/14/52/hiking-6153739_1280.png\" />\n        </Box>\n        <Heading as=\"h1\" size=\"2xl\" textTransform=\"uppercase\">\n            Wandelingen\n        </Heading>\n        <Stack w=\"100%\" divider={<MoonDivider/>}>\n            <Walk location=\"Averbode bos & heide\" komootId=\"570508073\" date={new Date(\"12/18/2021\")} isDraft />\n            <Walk location=\"Kagevinne\" komootId=\"570502619\" date={new Date(\"11/19/2021\")} />\n            <Walk location=\"Gerhagen\" komootId=\"503252998\" date={new Date(\"09/25/2021\")} />\n        </Stack>\n    </VStack>\n}\n\nconst MoonDivider = () => {\n    return    <Center my={20}>\n        <Divider/>\n        <Box px={3}>\n        <FaMoon color=\"gray.500\" />\n            </Box>\n        <Divider/>\n    </Center>\n}\n","import { Heading, ListItem, VStack, Text, UnorderedList } from \"@chakra-ui/layout\"\n\nexport const Practical = () => {\n    return <VStack spacing={5}>\n        <Heading as=\"h1\" size=\"2xl\" textTransform=\"uppercase\">\n            Praktisch\n        </Heading>\n        <Text>\n            Een nachtwandeling is de ideale kans om oude of nieuwe vrienden te onmoeten. Er zijn meestal tussen de 6 en 15 personen aanwezig en het wordt aangemoedigd om met iedereen eens te spreken.\n        </Text>\n        <Text>\n            Enkele praktische tips:\n        </Text>\n            <UnorderedList>\n                <ListItem>🍻 Breng je eigen drank of snacks mee</ListItem>\n                <ListItem>⏱️ Kom op tijd naar de startplaats</ListItem>\n                <ListItem>🔦 Breng tocht-door-het-donker-gewijs een zaklamp mee</ListItem>\n            </UnorderedList>\n    </VStack>\n}\n","import { Center, Link } from \"@chakra-ui/layout\"\n\nexport const Footer = () => {\n    const year = new Date().getFullYear();\n    return <Center borderTop=\"1px solid\" height=\"60px\" fontSize=\"md\">\n        <Link href=\"https://www.linkedin.com/in/samgielis/\" isExternal>© Sam Gielis - {year}</Link>\n    </Center>\n}\n","import * as React from \"react\"\nimport {\n  ChakraProvider,\n  theme,\n  Container,\n  Stack,\n  Center,\n  Spacer,\n} from \"@chakra-ui/react\"\nimport { Header } from \"./layout/Header\"\nimport { Route, Routes } from \"react-router-dom\"\nimport { Home } from \"./screens/Home\"\nimport { Practical } from \"./screens/Practical\"\nimport { Footer } from \"./layout/Footer\"\n\nexport const App = () => (\n  <ChakraProvider theme={theme}>\n    <Stack fontSize=\"xl\" spacing={{base: 8, md: 10}} minH=\"100vh\">\n      <Header />\n      <Center>\n        <Container >\n          <Center p={.5}>\n            <Routes>\n              <Route path=\"/\" element={<Home />} />\n              <Route path=\"nachtwandeling\" element={<Home />} />\n              <Route path=\"praktisch\" element={<Practical />} />\n            </Routes>\n          </Center>\n        </Container>\n      </Center>\n      <Spacer/>\n      <Footer/>\n    </Stack>\n  </ChakraProvider >\n)\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { BrowserRouter } from \"react-router-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}